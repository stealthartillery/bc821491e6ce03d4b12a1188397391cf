<?php
/*
*	Pt (PHP Toolkit)
*	Copyright (C) 2008  Dinu Florin
*
*	Pt is free software: you can redistribute it and/or modify
*	it under the terms of the GNU Lesser General Public License as published by
*	the Free Software Foundation, either version 3 of the License, or
*	any later version.
*
*	Pt is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU Lesser General Public License for more details.
*
*	You should have received a copy of the GNU Lesser General Public License
*	along with Pt.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
*	This file contains the File mutex implementation.
*	This method uses the Semaphore extension to create a mutex.
*
*	@author		Dinu Florin <contact@florindinu.ro>
*	@package	Core
*	@subpackage	Mutex
*/

/**
*	File mutex class.
*
*	@author		Dinu Florin <contact@florindinu.ro>
*	@package	Core
*	@subpackage	Mutex
*/
class FileMutex implements BasicMutex
{
	protected $fileName	= null;	//The lock file.
	protected $file		= null;	//The file pointer.
	
	protected static $dir 	= null;		//The directory where we store the lock files.
	
	/**
	*	@see	BasicMutex::canInstantiate()
	*/
	public static function canInstantiate()
	{
		return function_exists('flock');	//It will return true in every normal case.
	}
	
	/**
	*	Constructor.
	*
	*	@see	BasicMutex::__construct()
	*/
	public function __construct($name)
	{			
		//Check the temp dir
		if(is_null(self::$dir))
		{
			self::$dir = Util::getTempDir().DIRECTORY_SEPARATOR.'pt-locks';
			if(!file_exists(self::$dir)) 
			{
				if(!@mkdir(self::$dir) && !file_exists(self::$dir)) 
				{
					throw new MutexException("Failed to create lock directory {self::$dir}");
				}
			}
		}
		
		$this->fileName = self::$dir.DIRECTORY_SEPARATOR.md5($name).'.lock';
		touch($this->fileName, time());
	}
	
	/**
	*	Lock the mutex.
	*
	*	@see	BasicMutex::lock()
	*/
	public function lock()
	{	
		$this->file = fopen($this->fileName, 'r');
		if($this->file === false) 
		{
			throw new MutexException("Error opening lock file {$this->fileName}");
		}
		
		if(!flock($this->file, LOCK_EX))
		{
			throw new MutexException("Error locking mutex");
		}
	}
	
	/**
	*	Unlock the mutex.
	*
	*	@see	BasicMutex::unlock()
	*/
	public function unlock()
	{	
		if(!flock($this->file, LOCK_UN))
		{
			throw new MutexException("Error unlocking mutex");
		}
		fclose($this->file);
	}
}